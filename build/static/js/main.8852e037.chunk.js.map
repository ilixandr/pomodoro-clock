{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["INITIALBREAK","INITIALSESSION","TWENTYFIVEMINUTES","Tomato","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOn","breakLength","sessionLength","timeLeft","countdownType","handleBreakDecrement","bind","assertThisInitialized","handleBreakIncrement","handleSessionDecrement","handleSessionIncrement","handleReset","handleStart","handleStop","playSound","stopSound","sound","document","getElementById","currentTime","play","pause","setState","_this2","prevState","sessionTimer","setInterval","clearInterval","breakTimer","started","minutes","Math","floor","seconds","react_default","a","createElement","id","className","onClick","src","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8852e037.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n/* Constants area */\nconst INITIALBREAK = 5\nconst INITIALSESSION = 25\nconst TWENTYFIVEMINUTES = 25 * 60\nconst MININTERVAL = 1\nconst MAXINTERVAL = 60\nconst SECONDSINAMINUTE = 60\nconst SESSIONSTOP = -1\nconst SOUNDINITTIME = 0\n/* Build components here */\nclass Tomato extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOn: false,\n      breakLength: INITIALBREAK,\n      sessionLength: INITIALSESSION,\n      timeLeft: TWENTYFIVEMINUTES,\n      countdownType: \"Session\"\n    };\n    this.handleBreakDecrement = this.handleBreakDecrement.bind(this);\n    this.handleBreakIncrement = this.handleBreakIncrement.bind(this);\n    this.handleSessionDecrement = this.handleSessionDecrement.bind(this);\n    this.handleSessionIncrement = this.handleSessionIncrement.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.stopSound = this.stopSound.bind(this);\n  }\n  playSound() {\n    let sound = document.getElementById(\"beep\");\n    sound.currentTime = SOUNDINITTIME;\n    sound.play();\n  }\n  stopSound() {\n    let sound = document.getElementById(\"beep\");\n    sound.pause();\n    sound.currentTime = SOUNDINITTIME;\n  }\n  handleBreakDecrement() {\n    if (this.state.breakLength > MININTERVAL && !this.state.isOn) {\n      this.setState({breakLength: this.state.breakLength - 1});\n     }\n  }\n  handleBreakIncrement() {\n    if (this.state.breakLength < MAXINTERVAL  && !this.state.isOn){\n      this.setState({breakLength: this.state.breakLength + 1});\n    } \n  }\n  handleSessionDecrement() {\n    if (this.state.sessionLength > MININTERVAL  && !this.state.isOn){\n      this.setState({sessionLength: this.state.sessionLength - 1, timeLeft: (this.state.sessionLength - 1) * SECONDSINAMINUTE});\n    }\n  }\n  handleSessionIncrement() {\n    if (this.state.sessionLength < MAXINTERVAL  && !this.state.isOn){\n      this.setState({sessionLength: this.state.sessionLength + 1, timeLeft: (this.state.sessionLength + 1) * SECONDSINAMINUTE});\n    } \n  }\n  handleStart() {\n    if (this.state.isOn) return;\n    this.setState((prevState, props) => ({isOn: true}));\n    if (this.state.countdownType === \"Session\") {\n      this.sessionTimer = setInterval(() => {\n        this.setState((prevState, props) => ({timeLeft: prevState.timeLeft - 1}));\n        if(this.state.timeLeft === SESSIONSTOP) {\n          clearInterval(this.sessionTimer);\n          this.setState({timeLeft: this.state.breakLength * SECONDSINAMINUTE, countdownType: \"Break\"});\n          this.playSound();\n          this.breakTimer = setInterval(() => {\n            this.setState((prevState, props) => ({timeLeft: prevState.timeLeft - 1}));\n            if(this.state.timeLeft === SESSIONSTOP) {\n              clearInterval(this.breakTimer);\n              this.setState({timeLeft: this.state.sessionLength * SECONDSINAMINUTE, countdownType: \"Session\"});\n              this.playSound();\n            }\n          }, 1000);\n        }\n      }, 1000);\n    } \n  }\n  handleStop() {\n    this.setState({isOn: false});\n    this.started = false;\n    clearInterval(this.sessionTimer);\n    clearInterval(this.breakTimer);\n  }\n  handleReset() {\n    this.setState({breakLength: INITIALBREAK, sessionLength: INITIALSESSION, timeLeft: TWENTYFIVEMINUTES, countdownType: \"Session\", isOn: false});\n    clearInterval(this.sessionTimer);\n    clearInterval(this.breakTimer);\n    this.stopSound();\n  }\n  render() {\n    let minutes = Math.floor(this.state.timeLeft / 60.0);\n    let seconds = this.state.timeLeft - minutes * 60;\n    return (\n      <div id=\"content\">\n        <div className=\"left-panel\">\n          <h2 id=\"break-label\">Break Length</h2>\n          <div className=\"controls-left\">\n            <i id=\"break-decrement\" className=\"fa fa-minus-square\" onClick={this.handleBreakDecrement}></i>&nbsp;\n            <div id=\"break-length\">{this.state.breakLength}</div>&nbsp;\n            <i id=\"break-increment\" className=\"fa fa-plus-square\" onClick={this.handleBreakIncrement}></i>\n          </div>\n        </div>\n        <div className=\"right-panel\">\n          <h2 id=\"session-label\">Session Length</h2>\n          <div className=\"controls-right\">\n            <i id=\"session-decrement\" className=\"fa fa-minus-square\" onClick={this.handleSessionDecrement}></i>&nbsp;\n            <div id=\"session-length\">{this.state.sessionLength}</div>&nbsp;\n            <i id=\"session-increment\" className=\"fa fa-plus-square\" onClick={this.handleSessionIncrement}></i>\n          </div>\n        </div>\n        <div className=\"bottom-center-panel\">\n          <h2 id=\"timer-label\">{this.state.countdownType}</h2>\n          <div id=\"time-left\" className={this.state.timeLeft < 60 ? \"yellow-text\" : \"white-text\"}>{minutes < 10 ? \"0\" + minutes : minutes}:{seconds < 10 ? \"0\" + seconds : seconds}</div>\n          <div className=\"time-controls\">\n            <i id=\"start_stop\" className={this.state.isOn ? \"fa fa-stop-circle\" : \"fa fa-play-circle\"} onClick={this.state.isOn ? this.handleStop : this.handleStart}></i>\n            <i id=\"reset\" className=\"fas fa-sync-alt\" onClick={this.handleReset}></i>\n          </div>\n        </div>\n        <audio id=\"beep\">\n          <source src=\"https://www.soundjay.com/button/button-2.mp3\" type=\"audio/mpeg\"/>\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default Tomato;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tomato from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Tomato />, document.getElementById('reactor'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}